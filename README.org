* Emacs config 
** Thanks!
I am by no means an expert on Emacs and everything I know I slowly cobbled together from different resources. In particular there are some which helped me a lot in figuring some things out:

- [[https://emacs-berlin.org/][the Emacs Berlin Meetup]]
- [[https://github.com/gjstein][Gregory J Stein]]
- [[https://cestlaz.github.io][Mike Zamansky]] 
- [[https://sachachua.com/blog/][Sacha Chua]]
- [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][Rainer KÃ¶nig]]
- [[http://pragmaticemacs.com/][Pragmatic Emacs]]
- [[http://therandymon.com/woodnotes/emacs-for-writers/emacs-for-writers.html][The Woodnotes Guide to Emacs for Writers]]
- [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][Uncle Daves Youtube Channel]]
- [[https://www.youtube.com/watch?v=FRu8SRWuUko][Mohammed Ismail Ansari's Emacs Config in 24 min]]
- [[https://fransiska.github.io/emacs/2017/08/21/web-development-in-emacs][Franziskas WebDev Setup]]
- [[https://www.youtube.com/watch?v=I28jFkpN5Zk][Arjen Wiersma's GNU Emacs configuration for programming]]
- ... and lots of others :)
- and of course all the great documentation which I will do my best to link to in the appropriate places of this config

If anyone feels like contributing to this config it would be great! I am sure there is a lot in it which can be done better. Please let me know.

Also I would like to include more resources about Emacs, so please let me know, what might make sense.
** How to use this config
Emacs relies on a config file which you find in the ~.emacs.d~ folder in your user folder (Linux & MacOS). In this folder a ~init.el~ file will hold your individual configuration. There is stuff that might be easier to set up in the "Options" menu in Emacs itself. This configurations will then be written by Emacs in your ~init.el~ under the entry ~(custom-set-variables~. Just leave this block as it is.
This configuration is written in [[https://orgmode.org/][Org Mode]] and uses [[https://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]] to have Emacs write an actual config file from your org mode config for you.
In order to make this work you will need to place the following in your ~init.el~. You can see that the next headline has a ~COMMENT~ in front of it, so it will be ignored by Org Babel. This makes sense if you want to make it really easy and just rename this file to ~setup.org~ so it becomes your config file as a whole. This might not be the most efficient in terms of startup times, since a large .org file can take a moment to load. You can toggle comments of org headlines with ~C-c ;~ and I will use this in the config to comment out things which are more meant for specific scenarious or taste. Just comment them back in, if you like to use them, or copy the bits and pieces you want to your own new config file. If you are reading this on my GitHub page, the headlines which are commented out will not be displayed. It makes more sense to get this file and open it in your Emacs.
*** COMMENT What goes in your init.el 
#+BEGIN_SRC emacs-lisp

;; require and initialize emacs package manager package
(require 'package) 
(package-initialize)

;; add the MELPA repository as a source for packages you can then install
(add-to-list 'package-archives
	    '("melpa" . "https://melpa.org/packages/") t)

;; we will be using the 'use-package' macro in this config so if it is not installed, install it and refresh the package list
(unless (package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))

;; we need org mode to use org babel so we need to require it
(require 'org)

;; org babel will translate the source code blocks from your config written in org mode to an actual emacs config file, in this case the config in org mode is 'setup.org' and lives in your '.emacs.d' folder'
(org-babel-load-file (expand-file-name "~/.emacs.d/setup.org"))

#+END_SRC
*** Code Blocks in Org Mode
The code used to configure Emacs is written in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Emacs Lisp]] a dialect of [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]]. To specify a code block in Org Mode to make it recognisable as such for formatting and also for Org Babel it is marked as source code block with a specified language by using the following: ~#+BEGIN_SRC~ and ~#+END_SRC~. For Emacs Lisp and this config it will then look like this: ~#+BEGIN_SRC emacs-lisp~ and ~#+END_SRC~ as you can see above. For more information about [[https://orgmode.org/manual/Working-with-Source-Code.html][Working with Source Code]]  in Org Mode have a look here. 
*** Comments in Emacs Lisp
Since this config will mostly be written in Org Mode, there will be a lot of explanation and links to further reading material in the prose parts but putting comments in the code blocks themselves is of course always good practice. For the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html][Emacs Lisp Comment Syntax]] have a look here.
*** Emacs Packages & MELPA
Additions to the vanilla core of Emacs come in the form of [[https://www.emacswiki.org/emacs/InstallingPackages][Packages]] and can be added from different places, the most relevant being [[https://www.emacswiki.org/emacs/MELPA][MELPA]]. In this config the ~use-package~ macro will be used. For more information on [[https://github.com/jwiegley/use-package][use-package]] check the repository here.
** Your Config File
Next up on the list ist the actual config file which we will call ~setup.org~. If you want to give it another name, just change the reference in the ~init.el~. Since this file will get compiled to ~setup.el~ you want to avoid naming conflicts and not call it ~init.org~. For more information on the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][Files Emacs uses for Initialization]] have a look here.
In the following you find a lot of config suggestions, which you could copy to your personal config. The beauty of Emacs is that you can make it the perfect tool for what you want to use it for, so there is obviously no config for every person. This is just meant as a sort of currated list of configurations and packages that you might want to evaluate and modify to your own liking. By doing this you hopefully find your way to making Emacs just perfect for you. 
** The Bits and Pieces for the Config
*** Tips & Tricks
If you ever want to comment out a whole codeblock for a particular part of your config you can use the command ~C-c ;~ on a subtree so everything under this will not get compiled by org babel.
*** General Settings 
**** COMMENT Fixes for MacOS
If you are using a mac you might need this to make emacs work properly. Maybe not any more, maybe not on your system. If you are using MacOS and have problems, try it or do some research online.
#+BEGIN_SRC emacs-lisp
  (exec-path-from-shell-initialize)
  ;; macos problem fix for keyboard
  (set-keyboard-coding-system nil)

(setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'none)
(setq ns-function-modifier 'super)

;; ls --dired option is not supported on mac
(when (string= system-type "darwin")       
  (setq dired-use-ls-dired nil))
#+END_SRC
**** User Info
Specify your name and email adress if you like.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Your Full Name")
(setq user-mail-address "youremail@something.something")
#+END_SRC
**** Startup Screen
You might not want to see the startup screen every time you start Emacs.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
**** Tool Bar, Menu Bar, Scroll Bar
Depending on your preference you might not want these parts in the interface. Personally I keep the menu bar around and disable the other two. Comment in the menu bar line to also disable it. You can check if you are in ~window-system~ to only enable certain config bits if it is the case.
#+BEGIN_SRC emacs-lisp
(if window-system (scroll-bar-mode -1))
(tool-bar-mode -1)
;;(menu-bar-mode -1)
#+END_SRC
**** Yes or No
Emacs will often ask you stuff. If you dont want to type "yes" or "no", put this instead.
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
**** UTF-8
You probably want to use [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]] so you should specify it.
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
**** Bell
Emacs will sometimes prompt you with an acoustic or visual signal to get your attention. I like to disable this.
#+BEGIN_SRC emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+END_SRC
**** Scrolling Behaviour
For a smoother scrolling behaviour with the cursor you can add this. For [[https://www.emacswiki.org/emacs/SmoothScrolling][More Info on Scrolling]] check here.
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 1000)
#+END_SRC
**** Backups
Emacs can create backup files for you and if you want to use this feature I would recommend some config for it in order to avoid clutter. There is an argument for not having backups because we use Git but I think disk space is cheap and why not just have them. More [[https://www.emacswiki.org/emacs/BackupDirectory][Info about Backups]] can be found here.
#+BEGIN_SRC emacs-lisp
;; specify your backup directory so your backups have a nice home
(setq backup-directory-alist `(("." . "~/.emacs-backups")))
;; backups should be made by copying which is safest (but maybe slower)
(setq backup-by-copying t)
;; define how backups should be handled
(setq delete-old-versions t ; delete old versions
kept-new-versions 6 ;  how many new versions to keep
kept-old-versions 2 ; how many old versions to keep
version-control t) ; version number the backup files
#+END_SRC
*** Convenience
**** Visit Your Config File
Since you might re-visit your configuration quite regularly to fiddle around with things, you might want a quick way to open it. 
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/setup.org")) ; the path to your config file
  (global-set-key (kbd "C-c e") 'config-visit) ; you can pick any key binding you like, here I chose "C-c e"
#+END_SRC
**** Reload Config
After you changed stuff in your config you might want to reload it. Keep in mind that some changes need a restart of Emacs so this will not always work.
 #+BEGIN_SRC emacs-lisp
    (defun config-reload ()
      (interactive)
      (org-babel-load-file (expand-file-name "~/.emacs.d/setup.org"))) ; the path to your config file
    (global-set-key (kbd "C-c u") 'config-reload) ; the key binding to execute this function, here I chose "C-c u"
#+END_SRC
**** Kill Current Buffer
To have a quick way to kill the current buffer you can use this.
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer) ; chose any key binding you like, I use "C-x k"
#+END_SRC
*** Aesthetics
**** Color Themes
There is a wide variety of color themes you can choose from and this is totally up to your own preference. I personally tried different things but keep coming back to the almighty [[https://github.com/bbatsov/zenburn-emacs][Zenburn]] by [[https://github.com/jnurmine][Jani Nurminen]] so I give this as a starting point. Check the link above on different ways to install it. The easiest might be ~M-x package-install zenburn-theme~ from Emacs directly. To automatically load it on startup put this in your config:
#+begin_src emacs-lisp
(load-theme 'zenburn t)
#+end_src
**** Fonts 
There are lots of great fonts to choose from. Here are some recommendations which might be more aimed at writing code. If you want to use Emacs for writing text you might want to choose something else unless you like writing in a monospaced font (as I do). Personally I use Monoid (more specifically Monoisome).
- [[https://larsenwork.com/monoid/][Monoid]]
- [[https://github.com/tonsky/FiraCode][Fira Code]]
- [[https://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]]
- [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]
Once you installed the font of your desire on your system (or picked any already installed font on your system), you can set it via the menu bar ~Options -> Set Default Font~ and then ~Options -> Save Options~. If you have disabled the menu bar (see above) you can still use the GUI picker by doing ~M-x menu-set-font~.
**** Spaceline
So this one is a bit more involved and really more an aesthetical choice but if you like to have a different mode-line (the line below which gives you all sorts of usefull information) then you could use this mode-line from [[https://www.spacemacs.org/][Spacemacs]] (which is an Emacs distribution). You find all the info about [[https://github.com/TheBB/spaceline][Spaceline]] and how to configure it here. As a starting point this is what I use at the moment:
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme)
    (setq spaceline-nyan-cat-p t)
    (setq spaceline-buffer-position-p nil)
    (setq spaceline-projectile-root-p nil))
#+END_SRC
After changes it might be necessary to run ~M-x spaceline-compile~


*** Mode Line
You can customize a lot of the info which is displayes in your mode-line. Here are some things to pick from or extend.
**** Time / Time Format
I like a clock in the mode-line and I like 24h format with date.
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-format "%H:%M / %d %b")
(display-time-mode 1)
#+END_SRC
**** Mail
The mode-line usually tells you if you have mail. If you do not want this, put the following.
#+BEGIN_SRC emacs-lisp
(custom-set-variables '(display-time-mail-string ""))
#+END_SRC
**** Load Average
The load average time can be displayed. I dont need that.
#+BEGIN_SRC emacs-lisp
(setq display-time-default-load-average nil)
#+END_SRC
*** Diminish Mode
Emacs will show you all the active modes in the mode line which you might not want since it gets cluttered. To adress this Will Mengarini created [[https://github.com/emacsmirror/diminish][Diminish Mode]]. 

#+BEGIN_QUOTE
When we diminish a mode, we are saying we want it to continue doing its work for us, but we no longer want to be reminded of it. It becomes a night worker, like a janitor; it becomes an invisible man; it remains a component, perhaps an important one, sometimes an indispensable one, of the mechanism that maintains the day-people's world, but its place in their thoughts is diminished, usually to nothing. As we grow old we diminish more and more such thoughts, such people, usually to nothing. -- Will Mengarini
#+END_QUOTE

So just define what becomes a silent "night worker".

#+BEGIN_SRC emacs-lisp 
(use-package diminish
:ensure t
      :init
      (diminish 'which-key-mode)
      (diminish 'beacon-mode)
      (diminish 'visual-line-mode)
      (diminish 'autopair-mode)
      (diminish 'projectile-mode)    
      (diminish 'helm-mode)
      (diminish 'company-mode)
      (diminish 'flyspell-mode)
      (diminish 'flycheck-mode)
      (diminish 'rainbow-delimiters-mode)
      )
#+END_SRC
*** Org Mode
A great thing to use with Emacs is Org Mode. I use it for all my writing, project management, time keeping, habit tracking, note taking, documentation and - of course - this config. Check [[https://orgmode.org/manual/index.html][the Org Manual]] or also [[https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE][the great video series by Rainer KÃ¶nig]]. In the following you find some stuff I have found usefull to configure.
**** one Notefile to bind them ...  
I personally like to have one giant notefile for all notes which I can access via keybinding and just put in whatever it is I have to write down. I divide it into a few meaningfull main categories and then create sub-categories as needed in the outline. To bring it up quickly I use:
#+BEGIN_SRC emacs-lisp
;; modify filename / -path and keybinding to your liking
(global-set-key (kbd "<f6>") (lambda() (interactive)(find-file "~/orgfiles/misc.org")))
#+END_SRC
**** Org Bullets
In order to make the Org Mode outline structure with the asteriskes look nicer I use [[https://github.com/sabof/org-bullets][Org Bullets]] and define some individual symbols for the levels 1 to 5.
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:init
(setq org-bullets-bullet-list
;; any list of outline unicode characters can be enetered here for the different levels. enter them by using C-x 8 RET followed by the unicode number
'("â" "â" "âµ" "â¶" "â"))
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
**** Paths for Org and Agenda
For [[https://orgmode.org/manual/Agenda-Views.html][the Org Agenda]] and general Org Mode files, you should specify the paths which should be taken into account.
#+BEGIN_SRC emacs-lisp
  ;; org directories, please set your own
  (setq org-directory "/pathtoyourorgfiles")
  ;; agenda files, please set your own. multiple folders are possible
  (setq org-agenda-files 
  '("/filesforagenda" "/morefilesforagenda"))
#+END_SRC
**** Expand emacs-lisp code block
Since you will use a lot of emacs-lisp codeblocks in this config you might want to make your life easier and add a snippet. By typing ~<s~ and pressing ~TAB~ you can quickly create a source code block. If you dont want to specify the emacs-lisp part every time you can add a new shortcut with the following. Type ~<el~ and press ~TAB~ now for an emacs-lisp source code block.
#+BEGIN_SRC emacs-lisp
;; necessary to use quick insertion of code blocks
(require 'org-tempo)  
;; add code block for emacs-lisp
(add-to-list 'org-structure-template-alist
               '("el" . "src emacs-lisp"))
#+END_SRC
**** Keybindings & Settings
Keybindings in Emacs are absolutely flexible, so always pick what works for you. Some functions you might use often dont come with predefined keybindings so just choose some. Also there is a lot of setting variables you can use to fine tune the way Org Mode should work for you. Here are some. If you are not sure what a variable does bring up the documentation in Emacs with ~C-h v~ and then search for its name.
#+Begin_SRC emacs-lisp
;; keybinding for linking things in .org documents
(define-key global-map "\C-cl" 'org-store-link)
;; keybinding to bring up the agenda view
(define-key global-map "\C-ca" 'org-agenda)
;; add a timestamp when a todo is changed to done
(setq org-log-done time)
;; soft wrap lines and indent for org mode
(with-eval-after-load 'org       
  (setq org-startup-indented t) 
  (add-hook 'org-mode-hook 'visual-line-mode))
#+END_SRC
**** Time Tracking
Org Mode provides you with a nice way to track time which I use a lot to keep track how many work hours I have spend on a project. Have a look at [[https://orgmode.org/manual/Clocking-Work-Time.html#Clocking-Work-Time][Clocking Work Time]] for the necessary commands you can use. To make this work better for my taste I specify some things.
#+BEGIN_SRC emacs-lisp
;; adjust time format for clocksum in column view
(setq org-duration-format 'h:mm)
(setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
;; put all the clock entries into a drawer called CLOCKING
(setq org-clock-into-drawer "CLOCKING")
#+END_SRC
To get the most out of timetracking have a look at working with [[https://orgmode.org/manual/Tables.html][Tables]] in Org Mode. As a starting point here is some code you might find usefull:

#+BEGIN: clocktable :block untilnow :scope tree :header "#+NAME: mytimetrack\n" 
#+NAME: mytimetrack
| Headline         | Time    |       |
|------------------+---------+-------|
| *Total time*     | *16:21* |       |
|------------------+---------+-------|
| My fancy Project | 16:21   |       |
| \_  Timetrack    |         | 16:21 |
#+END: clocktable

This will sum up all your clock entries of the defined scope. If you want to update it press ~C-c C-x C-u~.

| Time Budget | Time Remaining |
|-------------+----------------|
|       40:00 |          23:39 |
#+TBLFM: $2=$1-(remote(mytimetrack, @4$3));U

This now will substract the summed up time from a "time budget" you specify. I often find this usefull for keeping track of projects. You could also easily calculate other stuff in, like your rate per hour or the like. For more information on [[https://orgmode.org/worg/org-tutorials/org-spreadsheet-intro.html][Spreadsheet Functions]] in Org Mode have a look here. To update a table like this put the cursor on its formula and press ~C-c C-c~.

**** ToDo States
You can use [[https://www.orgmode.org/manual/TODO-Items.html][ToDo Items]] in Org Mode and you can specify the states they can have as well as the corresponding shortcuts to set them like this:
#+BEGIN_SRC emacs-lisp
;;; org mode states (TODO changed to ACTIVE)
(setq org-todo-keywords
'((sequence "TODO(t)" "â ACTIVE(t)" "â WAITING(w)" "|" "â DONE(d)" "â CANCELED(c)")))
#+END_SRC

