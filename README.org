* Emacs config 
** Thanks!
I am by no means an expert on Emacs and everything I know I slowly cobbled together from different resources. In particular there are some which helped me a lot in figuring some things out:
- [[https://emacs-berlin.org/][the Emacs Berlin Meetup]]
- [[https://github.com/gjstein][Gregory J Stein]]
- [[https://cestlaz.github.io][Mike Zamansky]] 
- [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][Uncle Daves Youtube Channel]]
- [[https://www.youtube.com/watch?v=FRu8SRWuUko][Mohammed Ismail Ansari's Emacs Config in 24 min]]
- [[https://fransiska.github.io/emacs/2017/08/21/web-development-in-emacs][Franziskas WebDev Setup]]
- [[https://www.youtube.com/watch?v=I28jFkpN5Zk][Arjen Wiersma's GNU Emacs configuration for programming]]
- ... and lots of others :)
- and of course all the great documentation which I will do my best to link to in the appropriate places of this config
If anyone feels like contributing to this config it would be great! I am sure there is a lot in it which can be done better. Please let me know.
** How to use this config
Emacs relies on a config file which you find in the ~.emacs.d~ folder in your user folder (Linux & MacOS). In this folder a ~init.el~ file will hold your individual configuration. There is stuff that might be easier to set up in the "Options" menu in Emacs itself. This configurations will then be written by Emacs in your ~init.el~ under the entry ~(custom-set-variables~. Just leave this block as it is.
This configuration is written in [[https://orgmode.org/][Org mode]] and uses [[https://orgmode.org/worg/org-contrib/babel/intro.html][Org Babel]] to have Emacs write an actual config file from your org mode config for you.
In order to make this work you will need to place the following in your ~init.el~.
*** What goes in your init.el 
#+BEGIN_SRC emacs-lisp

;; require and initialize emacs package manager package
(require 'package) 
(package-initialize)

;; add the MELPA repository as a source for packages you can then install
(add-to-list 'package-archives
	    '("melpa" . "https://melpa.org/packages/") t)

;; we will be using the 'use-package' macro in this config so if it is not installed, install it and refresh the package list
(unless (package-installed-p 'use-package)
(package-refresh-contents)
(package-install 'use-package))

;; we need org mode to use org babel so we need to require it
(require 'org)

;; org babel will translate the source code blocks from your config written in org mode to an actual emacs config file, in this case the config in org mode is 'setup.org' and lives in your '.emacs.d' folder'
(org-babel-load-file (expand-file-name "~/.emacs.d/setup.org"))

#+END_SRC
*** Code Blocks in Org Mode
The code used to configure Emacs is written in [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Emacs Lisp]] a dialect of [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]]. To specify a code block in Org Mode to make it recognisable as such for formatting and also for Org Babel it is marked as source code block with a specified language by using the following: ~#+BEGIN_SRC~ and ~#+END_SRC~. For Emacs Lisp and this config it will then look like this: ~#+BEGIN_SRC emacs-lisp~ and ~#+END_SRC~ as you can see above. For more information about [[https://orgmode.org/manual/Working-with-Source-Code.html][Working with Source Code]]  in Org Mode have a look here. 
*** Comments in Emacs Lisp
Since this config will mostly be written in Org Mode, there will be a lot of explanation and links to further reading material in the prose parts but putting comments in the code blocks themselves is of course always good practice. For the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html][Emacs Lisp Comment Syntax]] have a look here.
*** Emacs Packages & MELPA
Additions to the vanilla core of Emacs come in the form of [[https://www.emacswiki.org/emacs/InstallingPackages][Packages]] and can be added from different places, the most relevant being [[https://www.emacswiki.org/emacs/MELPA][MELPA]]. In this config the ~use-package~ macro will be used. For more information on [[https://github.com/jwiegley/use-package][use-package]] check the repository here.
** Your Config File
Next up on the list ist the actual config file which we will call ~setup.org~. If you want to give it another name, just change the reference in the ~init.el~. Since this file will get compiled to ~setup.el~ you want to avoid naming conflicts and not call it ~init.org~. For more information on the [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html][Files Emacs uses for Initialization]] have a look here.
In the following you find a lot of config suggestions, which you could copy to your personal config. The beauty of Emacs is that you can make it the perfect tool for what you want to use it for, so there is obviously no config for every person. This is just meant as a sort of currated list of configurations and packages that you might want to evaluate and modify to your own liking. By doing this you hopefully find your way to making Emacs just perfect for you. 
** The Bits and Pieces for the Config
*** Tips & Tricks
If you ever want to comment out a whole codeblock for a particular part of your config you can use the command ~C-c ;~ on a subtree so everything under this will not get compiled by org babel.
*** General Settings 
**** User Info
Specify your name and email adress if you like.
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Your Full Name")
(setq user-mail-address "youremail@something.something")
#+END_SRC
**** Startup Screen
You might not want to see the startup screen every time you start Emacs.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC
**** Tool Bar, Menu Bar, Scroll Bar
Depending on your preference you might not want these parts in the interface. Personally I keep the menu bar around and disable the other two. Comment in the menu bar line to also disable it. You can check if you are in ~window-system~ to only enable certain config bits if it is the case.
#+BEGIN_SRC emacs-lisp
(if window-system (scroll-bar-mode -1))
(tool-bar-mode -1)
;;(menu-bar-mode -1)
#+END_SRC
**** Yes or No
Emacs will often ask you stuff. If you dont want to type "yes" or "no", put this instead.
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
**** UTF-8
You probably want to use [[https://en.wikipedia.org/wiki/UTF-8][UTF-8]] so you should specify it.
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC
**** Bell
Emacs will sometimes prompt you with an acoustic or visual signal to get your attention. I like to disable this.
#+BEGIN_SRC emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+END_SRC
**** Scrolling Behaviour
For a smoother scrolling behaviour with the cursor you can add this. For [[https://www.emacswiki.org/emacs/SmoothScrolling][More Info on Scrolling]] check here.
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 1000)
#+END_SRC
*** Convenience
**** Visit Your Config File
Since you might re-visit your configuration quite regularly to fiddle around with things, you might want a quick way to open it. 
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/setup.org")) ; the path to your config file
  (global-set-key (kbd "C-c e") 'config-visit) ; you can bin any key binding you like, here I chose "C-c e"
#+END_SRC
**** Reload Config
After you changed stuff in your config you might want to reload it. Keep in mind that some changes need a restart of Emacs so this will not always work.
 #+BEGIN_SRC emacs-lisp
    (defun config-reload ()
      (interactive)
      (org-babel-load-file (expand-file-name "~/.emacs.d/setup.org"))) ; the path to your config file
    (global-set-key (kbd "C-c u") 'config-reload) ; the key binding to execute this function, here I chose "C-c u"
#+END_SRC
**** Kill Current Buffer
To have a quick way to kill the current buffer you can use this.
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer) ; chose any key binding you like, I use "C-x k"
#+END_SRC
*** Aesthetics
**** Color Themes
There is a wide variety of color themes you can choose from and this is totally up to your own preference. I personally tried different things but keep coming back to the almighty [[https://github.com/bbatsov/zenburn-emacs][Zenburn]] by [[https://github.com/jnurmine][Jani Nurminen]] so I give this as a starting point. Check the link above on different ways to install it. The easiest might be ~M-x package-install zenburn-theme~ from Emacs directly. To automatically load it on startup put this in your config:
#+begin_src emacs-lisp
(load-theme 'zenburn t)
#+end_src
**** Fonts 
There are lots of great fonts to choose from. Here are some recommendations which might be more aimed at writing code. If you want to use Emacs for writing text you might want to choose something else unless you like writing in a monospaced font (as I do). Personally I use Monoid (more specifically Monoisome).
- [[https://larsenwork.com/monoid/][Monoid]]
- [[https://github.com/tonsky/FiraCode][Fira Code]]
- [[https://www.levien.com/type/myfonts/inconsolata.html][Inconsolata]]
- [[https://github.com/adobe-fonts/source-code-pro][Source Code Pro]]
Once you installed the font of your desire on your system (or picked any already installed font on your system), you can set it via the menu bar ~Options -> Set Default Font~ and then ~Options -> Save Options~. If you have disabled the menu bar (see above) you can still use the GUI picker by doing ~M-x menu-set-font~.
**** Spaceline
So this one is a bit more involved and really more an aesthetical choice but if you like to have a different mode-line (the line below which gives you all sorts of usefull information) then you could use this mode-line from [[https://www.spacemacs.org/][Spacemacs]] (which is an Emacs distribution). You find all the info about [[https://github.com/TheBB/spaceline][Spaceline]] and how to configure it here. As a starting point this is what I use at the moment:
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq spaceline-buffer-encoding-abbrev-p nil)
    (setq spaceline-line-column-p nil)
    (setq spaceline-line-p nil)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme)
    (setq spaceline-nyan-cat-p t)
    (setq spaceline-buffer-position-p nil)
    (setq spaceline-projectile-root-p nil))
#+END_SRC
After changes it might be necessary to run ~M-x spaceline-compile~



